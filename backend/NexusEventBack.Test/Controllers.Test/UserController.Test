using Moq;
using NexusEventBack.Controllers;
using NexusEventBack.Models;
using NexusEventBack.Services;
using NexusEventBack.Enums;
using Xunit;
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace NexusEventBack.Test.Controllers
{
    public class UserControllerTest
    {
        private readonly Mock<IUserService> _mockService;
        private readonly UserController _controller;

        public UserControllerTest()
        {
            _mockService = new Mock<IUserService>();
            _controller = new UserController(_mockService.Object);
        }

        [Fact]
        public async Task GetAllUsers_ShouldReturnOkResult_WithListOfUsers()
        {
            var users = new List<UserModel>
            {
                new UserModel { Id = 1, Name = "Alice", Email = "alice@test.com", PasswordHash = "hash", Role = RoleEnum.Admin },
                new UserModel { Id = 2, Name = "Bob", Email = "bob@test.com", PasswordHash = "hash", Role = RoleEnum.User }
            };

            _mockService.Setup(s => s.GetAllUsersAsync()).ReturnsAsync(users);

            var result = await _controller.GetAllUsers();

            var okResult = Assert.IsType<OkObjectResult>(result);
            var returnUsers = Assert.IsAssignableFrom<IEnumerable<UserModel>>(okResult.Value);
            Assert.Equal(2, ((List<UserModel>)returnUsers).Count);
        }

        [Fact]
          public async Task GetAllUsers_ShouldReturnNoContent_WhenListIsEmpty()
          {
              var users = new List<UserModel>(); // vazio
              _mockService.Setup(s => s.GetAllUsersAsync()).ReturnsAsync(users);
          
              var result = await _controller.GetAllUsers();
          
              Assert.IsType<NoContentResult>(result);
          }


        [Fact]
        public async Task GetUserById_ShouldReturnOkResult_WhenUserExists()
        {
            // Arrange
            var user = new UserModel { Id = 1, Name = "Alice", Email = "alice@test.com", PasswordHash = "hash", Role = RoleEnum.Admin };

            _mockService.Setup(s => s.GetUserByIdAsync(1)).ReturnsAsync(user);

            // Act
            var result = await _controller.GetUserById(1);

            // Assert
            var okResult = Assert.IsType<OkObjectResult>(result);
            var returnUser = Assert.IsType<UserModel>(okResult.Value);
            Assert.Equal("Alice", returnUser.Name);
        }

         [Fact]
        public async Task GetUserById_ShouldReturnNotFound_WhenUserDoesNotExist()
        {
            _mockService.Setup(s => s.GetUserByIdAsync(999)).ReturnsAsync((UserModel?)null);

            var result = await _controller.GetUserById(999);

            Assert.IsType<NotFoundResult>(result);
        }

        [Fact]
        public async Task CreateUser_ShouldReturnCreatedAtAction_WhenSuccessful()
        {
            var user = new UserModel { Id = 1, Name = "Alice", Email = "alice@test.com", PasswordHash = "hash", Role = RoleEnum.Admin };

            _mockService.Setup(s => s.CreateUserAsync(user)).ReturnsAsync(user);

            var result = await _controller.CreateUser(user);

            var createdResult = Assert.IsType<CreatedAtActionResult>(result);
            var returnUser = Assert.IsType<UserModel>(createdResult.Value);
            Assert.Equal("Alice", returnUser.Name);
        }

        [Fact]
        public async Task CreateUser_ShouldReturnBadRequest_WhenModelIsInvalid_NameIsRequired()
        {
            _controller.ModelState.AddModelError("Name", "Required");

            var user = new UserModel
            {
                Id = 1,
                Email = "invalid@test.com",
                PasswordHash = "hash",
                Role = RoleEnum.User
            };

            var result = await _controller.CreateUser(user);

            Assert.IsType<BadRequestObjectResult>(result);
        }

        [Fact]
        public async Task CreateUser_ShouldReturnBadRequest_WhenModelIsInvalid_EmailIsRequired()
        {
            _controller.ModelState.AddModelError("Email", "Required");

            var user = new UserModel
            {
                Id = 1,
                Name = "Jhon Doe",
                PasswordHash = "hash",
                Role = RoleEnum.User
            };

            var result = await _controller.CreateUser(user);

            Assert.IsType<BadRequestObjectResult>(result);
        }

        [Fact]
        public async Task CreateUser_ShouldReturnBadRequest_WhenModelIsInvalid_PasswordIsRequired()
        {
            _controller.ModelState.AddModelError("Email", "Required");

            var user = new UserModel
            {
                Id = 1,
                Name = "Jhon Doe",
                Email = "invalid@test.com",
                Role = RoleEnum.User
            };

            var result = await _controller.CreateUser(user);

            Assert.IsType<BadRequestObjectResult>(result);
        }

        [Fact]
        public async Task UpdateUser_ShouldReturnOkResult_WhenSuccessful()
        {
            var user = new UserModel { Id = 1, Name = "Alice Updated", Email = "alice@test.com", PasswordHash = "hash", Role = RoleEnum.Admin };

            _mockService.Setup(s => s.UpdateUserAsync(1, user)).ReturnsAsync(user);

            var result = await _controller.UpdateUser(1, user);

            var okResult = Assert.IsType<OkObjectResult>(result);
            var returnUser = Assert.IsType<UserModel>(okResult.Value);
            Assert.Equal("Alice Updated", returnUser.Name);
        }

        [Fact]
        public async Task UpdateUser_ShouldReturnNotFound_WhenUserDoesNotExist()
        {
            var user = new UserModel
            {
                Id = 99,
                Name = "Ghost",
                Email = "ghost@test.com",
                PasswordHash = "hash",
                Role = RoleEnum.User
            };

            _mockService.Setup(s => s.UpdateUserAsync(99, user)).ReturnsAsync((UserModel?)null);

            var result = await _controller.UpdateUser(99, user);

            Assert.IsType<NotFoundResult>(result);
        }

        [Fact]
        public async Task UpdateUser_ShouldReturnBadRequest_WhenModelIsInvalid()
        {
            _controller.ModelState.AddModelError("Email", "Invalid format");

            var user = new UserModel
            {
                Id = 1,
                Name = "Alice",
                Email = "wrong-email",
                PasswordHash = "hash",
                Role = RoleEnum.Admin
            };

            var result = await _controller.UpdateUser(1, user);

            Assert.IsType<BadRequestObjectResult>(result);
        }

        [Fact]
        public async Task DeleteUser_ShouldReturnNoContent_WhenSuccessful()
        {
            _mockService.Setup(s => s.DeleteUserAsync(1)).ReturnsAsync(true);

            var result = await _controller.DeleteUser(1);

            Assert.IsType<NoContentResult>(result);
        }

        [Fact]
        public async Task DeleteUser_ShouldReturnNotFound_WhenUserDoesNotExist()
        {
            _mockService.Setup(s => s.DeleteUserAsync(99)).ReturnsAsync(false);

            var result = await _controller.DeleteUser(99);

            Assert.IsType<NotFoundResult>(result);
        }

        [Fact]
        public async Task DeleteUser_ShouldReturnNotFound_WhenUserDoesNotExist()
        {
            _mockService.Setup(s => s.DeleteUserAsync(99)).ReturnsAsync(false);

            var result = await _controller.DeleteUser(99);

            Assert.IsType<NotFoundResult>(result);
        }
    }
}
